name: flask
description: A starter component that uses Flask framework and Postgres database.

keywords:
  - Flask
  - Postgres
  - Python
  - HTML
  - Gunicorn

secrets:
  gunicorn_workers:
    description: Number of Gunicorn worker processes
    default: 4
  db_user:
    description: Root user to assign to the component's database
    default: postgres
  db_pass:
    description: Root password to assign to the component's database
    default: password
  db_name:
    description: Name of the database the component will store content in
    default: movie_db
  db_port:
    description: Port for the database
    default: 5432
  app_port:
    description: Port the app accepts connections on
    default: 5000

services:
  database:
    image: postgres:12
    interfaces:
      main:
        port: ${{ secrets.db_port }}
        protocol: postgresql
    environment:
      POSTGRES_USER: ${{ secrets.db_user }}
      POSTGRES_PASSWORD: ${{ secrets.db_pass }}
      POSTGRES_DB: ${{ secrets.db_name }}
    liveness_probe:
      command: pg_isready -d ${{ secrets.db_name }} -U ${{ secrets.db_user }}
      interval: 10s
      failure_threshold: 3

  app:
    build:
      context: .
    depends_on:
      - database
    interfaces:
      main:
        port: ${{ secrets.app_port }}
        ingress:
          subdomain: app
    environment:
      FLASK_ENV: production
      POSTGRES_URL: postgresql://${{ secrets.db_user }}:${{ secrets.db_pass }}@${{ services.database.interfaces.main.host}}:${{ services.database.interfaces.main.port}}/${{ secrets.db_name }}
    # liveness_probe:
    #   command: curl --fail localhost:5000
    #   interval: 10s
    #   failure_threshold: 3
    command:
      - sh
      - -c
      - |
        gunicorn -w ${{ secrets.gunicorn_workers }} -b 0.0.0.0:${{ services.app.interfaces.main.port }} "app:app"
    debug:
      environment:
        FLASK_ENV: development
      command: flask --app app run --host=0.0.0.0
      volumes:
        src:
          host_path: ./src
          mount_path: /app
